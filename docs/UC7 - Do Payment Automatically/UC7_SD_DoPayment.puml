@startuml
autonumber

participant "task\n:DoPaymentTask" as TASK
participant "ApplicationPOT" as _APP
participant "app\n:ApplicationPOT" as APP
participant "Platform" as P
participant "rFree\n:RegisterFreelancer" as RF
participant "lf\n:List<Freelancer>" as LF
participant "org\n:Organization" as O
participant "lt\n:List<Task>" as LT

participant "ts :Task" as T
participant "amountsET\n: List<Task>" as LTS
participant "freel\n:Freelancer" as F

participant "rt\n:RegisterTransaction" as RT
participant "ltr\n:List<TransactionExecution>" as LTR
participant "tr\n:TransactionExecution" as TR
participant "p\n:Payment" as PA
participant "nltr\nList<TransactionExecution>" as NLTR
participant "CurrencyConverter" as CC
participant "Writer" as W

[o-> TASK : DoPayment()
activate TASK

TASK -> _APP : app = getInstance()
activate _APP
deactivate _APP

TASK -> APP : plt = getPlatform()
activate APP
deactivate APP

TASK -> P : rFree = getRegisterFreelancer()
activate P
deactivate P
TASK -> RF : lf = getFreelancerList()
activate RF
deactivate RF

TASK -> O : lt = getTaskList()
activate O
deactivate O

TASK --> LTS** : create()






loop [for every task]

TASK -> LT : ts = get(j)
activate LT
deactivate LT



TASK -> T : verifier = isIsFinished()
activate T
deactivate T
TASK -> T : verifier2 = isIsPayed()
activate T
deactivate T

opt [if verifier == true && verifier2 == false]



TASK -> LTS : addAmountsET(ts)
activate LTS
deactivate LTS

end opt
end loop


TASK -> O : rt = getRTrans()
activate O
deactivate O

TASK -> RT : ltr = getTransactions()
activate RT
deactivate RT

TASK --> NLTR** : create()


loop [for every Freelancer]

TASK -> NLTR : removeAll()
activate NLTR
deactivate NLTR

TASK -> LF : freel = getFreelancer(i)
activate LF
deactivate LF

loop [for every task not payed]
TASK -> LTS : ts = get(j)
activate LTS
deactivate LTS
loop [for every transaction]

TASK -> LTR : tr = get(k)
activate LTR
deactivate LTR

TASK -> TR : f = getFreelancer()
activate TR
deactivate TR

TASK -> TR : cts = getTask()
activate TR
deactivate TR


opt [if ts == cts && freel == f]
TASK -> NLTR : addNltr(tr)
activate NLTR
deactivate NLTR


TASK -> TR : p = getPayment()
activate TR
deactivate TR

TASK -> PA : value = getValueE()
activate PA
deactivate PA

TASK -> TASK : sum = addThisValue(value)


end opt
end loop
end loop

opt [if sum != 0]
TASK -> F : country = getCountry()
activate F
deactivate F

TASK -> CC : curr = convertToCurrency(sum, country)
activate CC
deactivate CC

TASK -> W : writeOrg(org, sum)
activate W
deactivate W

TASK -> W : generateReceipt(nltr, sum, curr)
activate W
deactivate W

end opt

end loop
deactivate TASK
@enduml