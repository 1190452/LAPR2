@startuml
autonumber

participant "task\n:DoPaymentTask" as TASK
participant "Platform" as P
participant "rFree\n:RegisterFreelancer" as RF
participant "lf\n:List<Freelancer>" as LF
participant "org\n:Organization" as O
participant "lt\n:List<Task>" as LT

participant "ts :Task" as T
participant "amountsET\n: List<Task>" as LTS
participant "freel\n:Freelancer" as F
participant "p\n:Payment" as PA
participant "rt\n:RegisterTransaction" as RT
participant "ltr\n:List<Transaction>" as LTR
participant "tr\n:Transaction" as TR
participant "nltr\nList<Transaction>" as NLTR
participant "Writer" as W

[o-> TASK : DoPayment(org)
activate TASK


TASK -> P : rFree = getRegisterFreelancer()
activate P
deactivate P
TASK -> RF : lf = getFreelancerList()
activate RF
deactivate RF

TASK -> O : lt = getTaskList()
activate O
deactivate O

TASK --> LTS** : create()






loop [for every task]

TASK -> LT : ts = get(j)
activate LT
deactivate LT



TASK -> T : verifier = getIsPayed()
activate T
deactivate T

opt [if verifier == false]



TASK -> LTS : addAmountsET(ts)
activate LTS
deactivate LTS

end opt
end loop


TASK -> P : rt = getRT()
activate P
deactivate P

TASK -> RT : ltr = getltr()
activate RT
deactivate RT

TASK --> NLTR** : create()


loop [for every Freelancer]

TASK --> NLTR : removeAll()
activate NLTR
deactivate NLTR

TASK -> LF : freel = getFreelancer(i)
activate LF
deactivate LF

loop [for every task not payed]
TASK -> LTS : ts = get(j)
activate LTS
deactivate LTS
loop [for every transaction]

TASK -> LTR : tr = get(k)
activate LTR
deactivate LTR

TASK -> TR : f = getFreelancer()
activate TR
deactivate TR

TASK -> TR : cts = getTask()
activate TR
deactivate TR


opt [if ts == cts && freel == f]
TASK -> NLTR : addNltr(tr)
activate NLTR
deactivate NLTR


TASK -> TR : value = getTransactionValue()
activate TR
deactivate TR

TASK -> TASK : sum = addThisValue(value)


end opt
end loop
end loop

TASK -> F : country = getCountry()
activate F
deactivate F

TASK -> TASK : curr = convertToCurrency(sum, country)



TASK --> PA** : create(sum, curr, nltr)

activate PA
PA -> PA : validatePay()
deactivate PA

TASK -> F : addPayment(p)
activate F
deactivate F

TASK -> W : writeOrg(org, sum, curr)
activate W
deactivate W

TASK -> PA : generateReceipt(country)
activate PA
deactivate PA




ref over PA : UC7_SD_GenerateReceipt

end loop
deactivate TASK
@enduml